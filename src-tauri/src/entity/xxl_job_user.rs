//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

// 定义实体模型，以及 Rust 数据类型和数据库表结构的映射关系
// sea-orm 官方文档： https://www.sea-ql.org/SeaORM/docs/generate-entity/entity-structure
// 使用 sea-orm-cli 生成实体， 官方文档： https://crates.io/crates/sea-orm-cli
// sea-orm-cli generate entity -u mysql://root:479368@localhost:3306/blog_xxl_job -o src/entity     亲测有效
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "xxl_job_user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub username: String,
    pub password: String,
    pub role: i8,
    pub permission: Option<String>,
}

// 如果本实体模型不依赖外部实体模型则可以空着
/// DeriveRelation 是必须要加的，不能省略（否则会报错）。它会生成一个枚举 Relation，用于描述实体之间的关系。
#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}
