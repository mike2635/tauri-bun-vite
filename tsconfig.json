{
  // TypeScript 编译配置选项
  "compilerOptions": {
    // 指定ECMAScript目标版本，ESNext表示最新版本
    "target": "ESNext",
    "useDefineForClassFields": true,
    // 指定生成哪个模块系统代码，ESNext表示最新模块化方案
    "module": "ESNext",
    // 编译过程中需要引入的库文件的列表，相当于依赖库
    "lib": ["ESNext", "DOM", "DOM.Iterable"],
    // 忽略所有的声明文件（ *.d.ts）的类型检查
    "skipLibCheck": true,
    // 要包含的类型声明文件名列表，添加Bun类型定义
    // 引入element-plus的类型声明
    "types": ["bun-types"],

    /* Bundler mode */
    // 决定如何处理模块
    "moduleResolution": "bundler",
    // 允许 TypeScript 文件以 TypeScript 特定的扩展名（如 .ts、.mts 或 .tsx）相互导入
    "allowImportingTsExtensions": true,
    // 允许导入具有 .json 扩展的模块
    "resolveJsonModule": true,
    // 将每个文件作为单独的模块
    "isolatedModules": true,
    // 不生成输出文件
    "noEmit": true,
    // 在 .tsx文件里支持JSX
    "jsx": "preserve",

    /* 源代码语法、样式分析检查配置项 */
    // 启用所有严格类型检查选项
    "strict": true,
    // 若有未使用的局部变量则抛错
    "noUnusedLocals": true,
    // 若有未使用的参数则抛错
    "noUnusedParameters": true,
    // 报告switch语句的fallthrough错误
    "noFallthroughCasesInSwitch": true,

    // 设置解析非绝对路径模块名时的基准目录
    // 当项目中被配置为 "baseUrl": "./"，TypeScript 将会从首先寻找与 tsconfig.json 处于相同目录的文件。
    "baseUrl": "./",
    // 将模块导入重新映射到相对于 baseUrl 路径的配置。当配置了 paths 则必须同时配置 baseUrl 否则编译错误
    // 一旦配置了别名，则其他所有地方都需要统一使用 @ 来代替 src 否则会出现异常报错
    "paths": {
      // 此映射相对于 baseUrl ，当我们输入 @/ 时会被映射成 src/
      "@/*": ["src/*"]
    }
  },

  // 如果没有include，编译器默认包含当前目录和子目录下所有的TypeScript文件（.ts, .d.ts 和 .tsx）
  // 排除在exclude里指定的文件。 如果指定了 include 编译器会将它们结合一并包含进来
  "include": ["src/**/*.ts", "src/**/*.d.ts", "src/**/*.tsx", "src/**/*.vue"],
  // 排除在编译过程中不必要的编译文件
  "exclude": ["node_modules", "tests/server/**/*.ts", "dist", "**/*.js"],
  // 编译过程中需要引入的库文件的列表，相当于依赖库
  "references": [{ "path": "./tsconfig.node.json" }]
}